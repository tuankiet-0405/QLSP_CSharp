@model THLTW.Models.ViewModels.RecommendationsViewModel

@{
    ViewData["Title"] = "Tr√≠ Tu·ªá Nh√¢n T·∫°o - Xu H∆∞·ªõng 2024";
}

<style>
    .ai-gradient-bg {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 15px;
        color: white;
    }
    
    .ai-card {
        border: none;
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        overflow: hidden;
    }
    
    .ai-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 20px 40px rgba(0,0,0,0.15);
    }
    
    .ai-feature-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 24px;
        margin: 0 auto 15px;
    }
    
    .chat-bubble {
        background: #f8f9fa;
        border-radius: 20px;
        padding: 15px;
        margin: 10px 0;
        position: relative;
    }
    
    .chat-bubble.ai {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        margin-left: 20px;
    }
    
    .chat-bubble.user {
        background: #e3f2fd;
        margin-right: 20px;
    }
    
    .typing-indicator {
        display: none;
        padding: 15px;
    }
    
    .typing-indicator span {
        height: 10px;
        width: 10px;
        float: left;
        margin: 0 1px;
        background-color: #667eea;
        display: block;
        border-radius: 50%;
        opacity: 0.4;
        animation: typing 1.4s infinite ease-in-out both;
    }
    
    .typing-indicator span:nth-child(1) { animation-delay: -0.32s; }
    .typing-indicator span:nth-child(2) { animation-delay: -0.16s; }
      keyframes typing {
        0%, 80%, 100% { transform: scale(0); }
        40% { transform: scale(1); }
    }
    
    .search-glow {
        box-shadow: 0 0 20px rgba(102, 126, 234, 0.3);
        border: 2px solid #667eea;
    }
    
    .trend-metric {
        background: linear-gradient(45deg, #667eea, #764ba2);
        color: white;
        border-radius: 10px;
        padding: 20px;
        text-align: center;
        margin-bottom: 20px;
    }
</style>

<div class="container-fluid">
    <!-- Hero Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="ai-gradient-bg p-5 text-center">
                <h1 class="display-4 mb-3">
                    ü§ñ <strong>Tr√≠ Tu·ªá Nh√¢n T·∫°o</strong> 
                    <span class="badge badge-light text-primary">2024</span>
                </h1>
                <p class="lead mb-4">Kh√°m ph√° t∆∞∆°ng lai mua s·∫Øm th√¥ng minh v·ªõi AI ti√™n ti·∫øn</p>
                <div class="row justify-content-center">
                    <div class="col-md-3">
                        <div class="trend-metric">
                            <h3 id="aiAccuracy">98.5%</h3>
                            <small>ƒê·ªô ch√≠nh x√°c AI</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="trend-metric">
                            <h3 id="processingSpeed">0.2s</h3>
                            <small>T·ªëc ƒë·ªô x·ª≠ l√Ω</small>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <div class="trend-metric">
                            <h3 id="recommendationsToday">1,247</h3>
                            <small>G·ª£i √Ω h√¥m nay</small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- AI Features Grid -->
    <div class="row mb-5">
        <div class="col-md-4 mb-4">
            <div class="ai-card h-100">
                <div class="card-body text-center p-4">
                    <div class="ai-feature-icon" style="background: linear-gradient(45deg, #ff6b6b, #ee5a24);">
                        üß†
                    </div>
                    <h5 class="card-title">AI Chatbot Th√¥ng Minh</h5>
                    <p class="card-text">Tr·ª£ l√Ω AI 24/7 hi·ªÉu ti·∫øng Vi·ªát t·ª± nhi√™n, t∆∞ v·∫•n s·∫£n ph·∫©m chuy√™n nghi·ªáp</p>
                    <button class="btn btn-primary btn-lg" onclick="openChatbot()">
                        <i class="fas fa-comment-dots"></i> Tr√≤ chuy·ªán ngay
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-4 mb-4">
            <div class="ai-card h-100">
                <div class="card-body text-center p-4">
                    <div class="ai-feature-icon" style="background: linear-gradient(45deg, #20bf6b, #01a3a4);">
                        üîç
                    </div>
                    <h5 class="card-title">T√¨m Ki·∫øm AI Si√™u Th√¥ng Minh</h5>
                    <p class="card-text">T√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i, h√¨nh ·∫£nh ho·∫∑c m√¥ t·∫£ t·ª± nhi√™n</p>
                    <button class="btn btn-success btn-lg" onclick="openSmartSearch()">
                        <i class="fas fa-search"></i> T√¨m ki·∫øm AI
                    </button>
                </div>
            </div>
        </div>
        
        <div class="col-md-4 mb-4">
            <div class="ai-card h-100">
                <div class="card-body text-center p-4">
                    <div class="ai-feature-icon" style="background: linear-gradient(45deg, #a55eea, #26de81);">
                        ‚≠ê
                    </div>
                    <h5 class="card-title">G·ª£i √ù C√° Nh√¢n H√≥a</h5>
                    <p class="card-text">AI ph√¢n t√≠ch s·ªü th√≠ch c√° nh√¢n ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω ho√†n h·∫£o</p>
                    <button class="btn btn-warning btn-lg" onclick="loadPersonalizedRecommendations()">
                        <i class="fas fa-magic"></i> Kh√°m ph√°
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- AI Chatbot Section -->
    <div class="row mb-5" id="chatbotSection" style="display: none;">
        <div class="col-12">
            <div class="ai-card">
                <div class="card-header ai-gradient-bg">
                    <h5 class="mb-0">
                        <i class="fas fa-robot"></i> AI Assistant - Tr·ª£ l√Ω th√¥ng minh
                        <button type="button" class="close text-white float-right" onclick="closeChatbot()">
                            <span>&times;</span>
                        </button>
                    </h5>
                </div>
                <div class="card-body" style="height: 400px; overflow-y: auto;" id="chatMessages">
                    <div class="chat-bubble ai">
                        <strong>AI Assistant:</strong> Xin ch√†o! T√¥i l√† tr·ª£ l√Ω AI c·ªßa THLTW. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:
                        <ul class="mt-2 mb-0">
                            <li>üõçÔ∏è T√¨m s·∫£n ph·∫©m ph√π h·ª£p</li>
                            <li>üí∞ So s√°nh gi√° c·∫£</li>
                            <li>‚≠ê ƒê·ªçc ƒë√°nh gi√° s·∫£n ph·∫©m</li>
                            <li>üì¶ Theo d√µi ƒë∆°n h√†ng</li>
                        </ul>
                        B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?
                    </div>
                </div>
                <div class="card-footer">
                    <div class="input-group">
                        <input type="text" id="chatInput" class="form-control" placeholder="Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n..." onkeypress="handleChatKeyPress(event)">
                        <div class="input-group-append">
                            <button class="btn btn-primary" onclick="sendMessage()">
                                <i class="fas fa-paper-plane"></i>
                            </button>
                            <button class="btn btn-info" onclick="startVoiceInput()">
                                <i class="fas fa-microphone"></i>
                            </button>
                        </div>
                    </div>
                    <div class="typing-indicator" id="typingIndicator">
                        <span></span>
                        <span></span>
                        <span></span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Smart Search Section -->
    <div class="row mb-5" id="smartSearchSection" style="display: none;">
        <div class="col-12">
            <div class="ai-card">
                <div class="card-header ai-gradient-bg">
                    <h5 class="mb-0">
                        <i class="fas fa-search"></i> T√¨m Ki·∫øm AI Th√¥ng Minh
                        <button type="button" class="close text-white float-right" onclick="closeSmartSearch()">
                            <span>&times;</span>
                        </button>
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="form-group">
                                <label>M√¥ t·∫£ s·∫£n ph·∫©m b·∫°n mu·ªën t√¨m:</label>
                                <textarea id="smartSearchInput" class="form-control search-glow" rows="3" 
                                    placeholder="VD: T√¥i mu·ªën t√¨m m·ªôt chi·∫øc ƒëi·ªán tho·∫°i c√≥ camera t·ªët, pin tr√¢u, gi√° d∆∞·ªõi 10 tri·ªáu..."></textarea>
                            </div>
                            <div class="btn-group btn-block">
                                <button class="btn btn-primary" onclick="performSmartSearch()">
                                    <i class="fas fa-brain"></i> T√¨m ki·∫øm AI
                                </button>
                                <button class="btn btn-info" onclick="searchByVoice()">
                                    <i class="fas fa-microphone"></i> T√¨m b·∫±ng gi·ªçng n√≥i
                                </button>
                                <button class="btn btn-success" onclick="searchByImage()">
                                    <i class="fas fa-camera"></i> T√¨m b·∫±ng h√¨nh ·∫£nh
                                </button>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card bg-light">
                                <div class="card-body">
                                    <h6>üí° G·ª£i √Ω t√¨m ki·∫øm:</h6>
                                    <div class="d-flex flex-wrap">
                                        <span class="badge badge-primary m-1 cursor-pointer" onclick="setSearchText('laptop gaming RTX')">Laptop Gaming RTX</span>
                                        <span class="badge badge-success m-1 cursor-pointer" onclick="setSearchText('ƒëi·ªán tho·∫°i camera ƒë·∫πp')">ƒêi·ªán tho·∫°i camera ƒë·∫πp</span>
                                        <span class="badge badge-warning m-1 cursor-pointer" onclick="setSearchText('tai nghe kh√¥ng d√¢y')">Tai nghe kh√¥ng d√¢y</span>
                                        <span class="badge badge-info m-1 cursor-pointer" onclick="setSearchText('ƒë·ªìng h·ªì th√¥ng minh')">ƒê·ªìng h·ªì th√¥ng minh</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- AI Results Section -->
    <div class="row" id="aiResultsSection" style="display: none;">
        <div class="col-12">
            <div class="ai-card">
                <div class="card-header">
                    <h5><i class="fas fa-magic"></i> K·∫øt qu·∫£ AI</h5>
                </div>
                <div class="card-body" id="aiResults">
                    <!-- AI results will be displayed here -->
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // AI Chatbot Functions
        function openChatbot() {
            document.getElementById('chatbotSection').style.display = 'block';
            document.getElementById('chatInput').focus();
        }

        function closeChatbot() {
            document.getElementById('chatbotSection').style.display = 'none';
        }

        function handleChatKeyPress(event) {
            if (event.key === 'Enter') {
                sendMessage();
            }
        }

        function sendMessage() {
            const input = document.getElementById('chatInput');
            const message = input.value.trim();
            if (!message) return;

            // Add user message
            addChatMessage(message, 'user');
            input.value = '';

            // Show typing indicator
            showTypingIndicator();

            // Simulate AI response (replace with actual AI API call)
            setTimeout(() => {
                hideTypingIndicator();
                const aiResponse = generateAIResponse(message);
                addChatMessage(aiResponse, 'ai');
            }, 1500);
        }

        function addChatMessage(message, sender) {
            const chatMessages = document.getElementById('chatMessages');
            const bubble = document.createElement('div');
            bubble.className = `chat-bubble ${sender}`;
            
            if (sender === 'ai') {
                bubble.innerHTML = `<strong>AI Assistant:</strong> ${message}`;
            } else {
                bubble.innerHTML = `<strong>B·∫°n:</strong> ${message}`;
            }
            
            chatMessages.appendChild(bubble);
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        function showTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'block';
        }

        function hideTypingIndicator() {
            document.getElementById('typingIndicator').style.display = 'none';
        }

        function generateAIResponse(userMessage) {
            const responses = {
                'gi√°': 'T√¥i c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m theo m·ª©c gi√° mong mu·ªën. B·∫°n ƒëang quan t√¢m ƒë·∫øn lo·∫°i s·∫£n ph·∫©m n√†o?',
                'ƒëi·ªán tho·∫°i': 'Ch√∫ng t√¥i c√≥ nhi·ªÅu d√≤ng ƒëi·ªán tho·∫°i t·ª´ ph√¢n kh√∫c gi√° r·∫ª ƒë·∫øn cao c·∫•p. B·∫°n c√≥ m·ª©c ng√¢n s√°ch c·ª• th·ªÉ kh√¥ng?',
                'laptop': 'Laptop c·ªßa ch√∫ng t√¥i c√≥ ƒë·∫ßy ƒë·ªß t·ª´ vƒÉn ph√≤ng ƒë·∫øn gaming. B·∫°n s·ª≠ d·ª•ng ch·ªß y·∫øu ƒë·ªÉ l√†m g√¨?',
                'giao h√†ng': 'Ch√∫ng t√¥i c√≥ giao h√†ng to√†n qu·ªëc trong 1-3 ng√†y. B·∫°n c√≥ mu·ªën xem th√¥ng tin chi ti·∫øt kh√¥ng?',
                'b·∫£o h√†nh': 'T·∫•t c·∫£ s·∫£n ph·∫©m ƒë·ªÅu c√≥ b·∫£o h√†nh ch√≠nh h√£ng. B·∫°n quan t√¢m s·∫£n ph·∫©m n√†o?'
            };

            // Simple keyword matching
            for (let keyword in responses) {
                if (userMessage.toLowerCase().includes(keyword)) {
                    return responses[keyword];
                }
            }

            return 'C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i ƒëang h·ªçc h·ªèi th√™m ƒë·ªÉ ph·ª•c v·ª• b·∫°n t·ªët h∆°n. B·∫°n c√≥ th·ªÉ n√™u r√µ h∆°n nhu c·∫ßu c·ªßa m√¨nh kh√¥ng?';
        }

        // Smart Search Functions
        function openSmartSearch() {
            document.getElementById('smartSearchSection').style.display = 'block';
            document.getElementById('smartSearchInput').focus();
        }

        function closeSmartSearch() {
            document.getElementById('smartSearchSection').style.display = 'none';
        }

        function setSearchText(text) {
            document.getElementById('smartSearchInput').value = text;
        }

        function performSmartSearch() {
            const query = document.getElementById('smartSearchInput').value.trim();
            if (!query) return;

            showAIResults();
            document.getElementById('aiResults').innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-spinner fa-spin fa-3x text-primary mb-3"></i>
                    <h5>ƒêang ph√¢n t√≠ch y√™u c·∫ßu c·ªßa b·∫°n...</h5>
                    <p class="text-muted">AI ƒëang t√¨m ki·∫øm s·∫£n ph·∫©m ph√π h·ª£p nh·∫•t</p>
                </div>
            `;

            // Simulate AI search (replace with actual API call)
            setTimeout(() => {
                document.getElementById('aiResults').innerHTML = generateSearchResults(query);
            }, 2000);
        }

        function searchByVoice() {
            alert('üé§ T√≠nh nƒÉng t√¨m ki·∫øm b·∫±ng gi·ªçng n√≥i s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!');
        }

        function searchByImage() {
            alert('üì∑ T√≠nh nƒÉng t√¨m ki·∫øm b·∫±ng h√¨nh ·∫£nh s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!');
        }

        function showAIResults() {
            document.getElementById('aiResultsSection').style.display = 'block';
        }

        function generateSearchResults(query) {
            return `
                <div class="alert alert-success">
                    <h6><i class="fas fa-check-circle"></i> T√¨m th·∫•y 15 s·∫£n ph·∫©m ph√π h·ª£p v·ªõi y√™u c·∫ßu: "${query}"</h6>
                </div>
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h6>iPhone 15 Pro Max</h6>
                                <p class="text-muted">Camera 48MP, A17 Pro, 256GB</p>
                                <h5 class="text-primary">29.990.000 VNƒê</h5>
                                <small class="text-success">ƒê·ªô ph√π h·ª£p: 95%</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h6>Samsung Galaxy S24 Ultra</h6>
                                <p class="text-muted">Camera 200MP, Snapdragon 8 Gen 3</p>
                                <h5 class="text-primary">27.990.000 VNƒê</h5>
                                <small class="text-success">ƒê·ªô ph√π h·ª£p: 92%</small>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card">
                            <div class="card-body">
                                <h6>Xiaomi 14 Ultra</h6>
                                <p class="text-muted">Camera Leica, Snapdragon 8 Gen 3</p>
                                <h5 class="text-primary">24.990.000 VNƒê</h5>
                                <small class="text-success">ƒê·ªô ph√π h·ª£p: 88%</small>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="text-center">
                    <button class="btn btn-primary">Xem t·∫•t c·∫£ k·∫øt qu·∫£</button>
                </div>
            `;
        }

        function loadPersonalizedRecommendations() {
            showAIResults();
            document.getElementById('aiResults').innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-magic fa-spin fa-3x text-warning mb-3"></i>
                    <h5>ƒêang ph√¢n t√≠ch s·ªü th√≠ch c·ªßa b·∫°n...</h5>
                    <p class="text-muted">AI ƒëang t·∫°o g·ª£i √Ω c√° nh√¢n h√≥a</p>
                </div>
            `;

            // Call actual API
            setTimeout(() => {
                fetch('/api/ai/recommendations/personalized?count=6')
                    .then(response => response.json())
                    .then(data => {
                        displayPersonalizedRecommendations(data);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        document.getElementById('aiResults').innerHTML = `
                            <div class="alert alert-danger">
                                <i class="fas fa-exclamation-triangle"></i> 
                                C√≥ l·ªói x·∫£y ra khi t·∫£i g·ª£i √Ω. Vui l√≤ng th·ª≠ l·∫°i sau.
                            </div>
                        `;
                    });
            }, 1000);
        }

        function displayPersonalizedRecommendations(products) {
            if (!products || products.length === 0) {
                document.getElementById('aiResults').innerHTML = `
                    <div class="text-center py-5">
                        <i class="fas fa-search fa-3x text-muted mb-3"></i>
                        <h5>Ch∆∞a c√≥ ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ t·∫°o g·ª£i √Ω c√° nh√¢n</h5>
                        <p class="text-muted">H√£y mua s·∫Øm th√™m ƒë·ªÉ AI h·ªçc h·ªèi s·ªü th√≠ch c·ªßa b·∫°n!</p>
                    </div>
                `;
                return;
            }

            let html = `
                <div class="alert alert-success">
                    <h6><i class="fas fa-user-check"></i> D√†nh ri√™ng cho b·∫°n - ${products.length} g·ª£i √Ω ƒë∆∞·ª£c c√° nh√¢n h√≥a</h6>
                </div>
                <div class="row">
            `;

            products.forEach(product => {
                html += `
                    <div class="col-md-4 mb-4">
                        <div class="card ai-card">
                            <div class="card-body">
                                <h6 class="card-title">${product.name}</h6>
                                <p class="text-muted">${product.description}</p>
                                <div class="d-flex justify-content-between align-items-center">
                                    <h5 class="text-primary mb-0">${formatPrice(product.price)} VNƒê</h5>
                                    <div class="badge badge-success">AI Match</div>
                                </div>
                                <div class="mt-2">
                                    <small class="text-info">
                                        <i class="fas fa-star"></i> Ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n
                                    </small>
                                </div>
                                <button class="btn btn-primary btn-sm btn-block mt-2" onclick="addToCart(${product.id})">
                                    <i class="fas fa-cart-plus"></i> Th√™m v√†o gi·ªè
                                </button>
                            </div>
                        </div>
                    </div>
                `;
            });

            html += '</div>';
            document.getElementById('aiResults').innerHTML = html;
        }

        function formatPrice(price) {
            return new Intl.NumberFormat('vi-VN').format(price);
        }

        function addToCart(productId) {
            // Implement add to cart functionality
            alert(`ƒê√£ th√™m s·∫£n ph·∫©m ${productId} v√†o gi·ªè h√†ng!`);
        }

        function startVoiceInput() {
            alert('üé§ T√≠nh nƒÉng nh·∫≠p gi·ªçng n√≥i s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn trong phi√™n b·∫£n ti·∫øp theo!');
        }

        // Initialize metrics animation
        document.addEventListener('DOMContentLoaded', function() {
            animateMetrics();
        });

        function animateMetrics() {
            // Animate accuracy
            let accuracy = 0;
            const targetAccuracy = 98.5;
            const accuracyInterval = setInterval(() => {
                accuracy += 0.5;
                document.getElementById('aiAccuracy').textContent = accuracy.toFixed(1) + '%';
                if (accuracy >= targetAccuracy) clearInterval(accuracyInterval);
            }, 20);

            // Animate processing speed
            let speed = 1.0;
            const targetSpeed = 0.2;
            const speedInterval = setInterval(() => {
                speed -= 0.05;
                document.getElementById('processingSpeed').textContent = speed.toFixed(1) + 's';
                if (speed <= targetSpeed) {
                    document.getElementById('processingSpeed').textContent = targetSpeed + 's';
                    clearInterval(speedInterval);
                }
            }, 30);

            // Animate recommendations count
            let count = 0;
            const targetCount = 1247;
            const countInterval = setInterval(() => {
                count += 50;
                document.getElementById('recommendationsToday').textContent = count.toLocaleString();
                if (count >= targetCount) {
                    document.getElementById('recommendationsToday').textContent = targetCount.toLocaleString();
                    clearInterval(countInterval);
                }
            }, 50);
        }
    </script>
}
