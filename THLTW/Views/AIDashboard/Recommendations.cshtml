@model THLTW.Models.ViewModels.RecommendationsViewModel

@{
    ViewData["Title"] = "AI Recommendations Testing";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1>
                    <i class="fas fa-robot text-info"></i>
                    AI Recommendations Testing
                </h1>
                <a href="@Url.Action("Index")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Back to Dashboard
                </a>
            </div>
        </div>
    </div>

    <!-- Test Controls -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-cogs"></i> Recommendation Testing Controls</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="card border-primary">
                                <div class="card-header bg-primary text-white">
                                    <h6><i class="fas fa-fire"></i> Trending Products</h6>
                                </div>
                                <div class="card-body text-center">
                                    <p>Get currently trending products based on recent activity</p>
                                    <button class="btn btn-primary" onclick="loadTrendingProducts()">
                                        <i class="fas fa-chart-line"></i> Load Trending
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card border-success">
                                <div class="card-header bg-success text-white">
                                    <h6><i class="fas fa-search"></i> Similar Products</h6>
                                </div>
                                <div class="card-body">
                                    <p>Find products similar to a specific product</p>
                                    <select id="productSelect" class="form-control mb-2">
                                        <option value="">Select a product...</option>
                                        @if (Model.AllProducts != null)
                                        {
                                            @foreach (var product in Model.AllProducts)
                                            {
                                                <option value="@product.Id">@product.Name</option>
                                            }
                                        }
                                    </select>
                                    <button class="btn btn-success" onclick="loadSimilarProducts()">
                                        <i class="fas fa-search-plus"></i> Find Similar
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="card border-info">
                                <div class="card-header bg-info text-white">
                                    <h6><i class="fas fa-user-friends"></i> User Recommendations</h6>
                                </div>
                                <div class="card-body">
                                    <p>Get personalized recommendations for a user</p>
                                    <select id="userSelect" class="form-control mb-2">
                                        <option value="">Select a user...</option>
                                        @if (Model.AllUsers != null)
                                        {
                                            @foreach (var user in Model.AllUsers)
                                            {
                                                <option value="@user.Id">@user.UserName</option>
                                            }
                                        }
                                    </select>
                                    <button class="btn btn-info" onclick="loadUserRecommendations()">
                                        <i class="fas fa-magic"></i> Get Recommendations
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Algorithm Performance -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-tachometer-alt"></i> Algorithm Performance Metrics</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="text-center">
                                <h3 class="text-primary">@Model.TotalRecommendations</h3>
                                <p class="text-muted">Total Recommendations</p>
                                <small class="text-info">Generated today</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h3 class="text-success">85%</h3>
                                <p class="text-muted">Accuracy Rate</p>
                                <small class="text-info">User acceptance</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h3 class="text-warning">1.2ms</h3>
                                <p class="text-muted">Avg Response Time</p>
                                <small class="text-info">Algorithm execution</small>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="text-center">
                                <h3 class="text-info">@Model.ActiveUsers</h3>
                                <p class="text-muted">Active Users</p>
                                <small class="text-info">With recommendation data</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Results Area -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5><i class="fas fa-list"></i> Recommendation Results</h5>
                    <div>
                        <button class="btn btn-sm btn-outline-primary" onclick="exportResults()">
                            <i class="fas fa-download"></i> Export
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="clearResults()">
                            <i class="fas fa-trash"></i> Clear
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div id="results-container">
                        <div class="text-center text-muted py-5">
                            <i class="fas fa-search fa-3x mb-3"></i>
                            <h5>No recommendations loaded yet</h5>
                            <p>Use the controls above to test different recommendation algorithms</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Algorithm Comparison -->
    <div class="row mb-4">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-chart-bar"></i> Algorithm Comparison</h5>
                </div>
                <div class="card-body">
                    <canvas id="algorithmChart" width="400" height="200"></canvas>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-clock"></i> Recent Test History</h5>
                </div>
                <div class="card-body">
                    <div class="table-responsive" style="max-height: 300px; overflow-y: auto;">
                        <table class="table table-sm">
                            <thead>
                                <tr>
                                    <th>Time</th>
                                    <th>Type</th>
                                    <th>Target</th>
                                    <th>Results</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="test-history">
                                <!-- Test history will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Advanced Testing -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5><i class="fas fa-flask"></i> Advanced Testing Options</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Recommendation Count:</label>
                                <select id="recommendationCount" class="form-control">
                                    <option value="5">5 recommendations</option>
                                    <option value="10" selected>10 recommendations</option>
                                    <option value="15">15 recommendations</option>
                                    <option value="20">20 recommendations</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Algorithm Weight:</label>
                                <select id="algorithmWeight" class="form-control">
                                    <option value="collaborative">Collaborative Filtering</option>
                                    <option value="content" selected>Content-Based</option>
                                    <option value="hybrid">Hybrid Approach</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-4">
                            <div class="form-group">
                                <label>Include Categories:</label>
                                <select id="categoryFilter" class="form-control">
                                    <option value="">All Categories</option>
                                    @if (Model.AllCategories != null)
                                    {
                                        @foreach (var category in Model.AllCategories)
                                        {
                                            <option value="@category.Id">@category.Name</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-12">
                            <button class="btn btn-warning" onclick="runBenchmarkTest()">
                                <i class="fas fa-stopwatch"></i> Run Benchmark Test
                            </button>
                            <button class="btn btn-danger" onclick="runStressTest()">
                                <i class="fas fa-bomb"></i> Stress Test (100 requests)
                            </button>
                            <button class="btn btn-info" onclick="analyzePerformance()">
                                <i class="fas fa-chart-area"></i> Analyze Performance
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let testHistory = [];
    
    // Initialize algorithm comparison chart
    const ctx = document.getElementById('algorithmChart').getContext('2d');
    const algorithmChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: ['Collaborative', 'Content-Based', 'Hybrid'],
            datasets: [{
                label: 'Accuracy (%)',
                data: [78, 85, 92],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(75, 192, 192, 0.2)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100
                }
            }
        }
    });

    async function loadTrendingProducts() {
        await performRequest('trending', 'Trending Products', '/api/ai/trending-products');
    }

    async function loadSimilarProducts() {
        const productId = document.getElementById('productSelect').value;
        if (!productId) {
            alert('Please select a product first');
            return;
        }
        const productName = document.getElementById('productSelect').selectedOptions[0].text;
        await performRequest('similar', `Similar to: ${productName}`, `/api/ai/similar-products/${productId}`);
    }

    async function loadUserRecommendations() {
        const userId = document.getElementById('userSelect').value;
        if (!userId) {
            alert('Please select a user first');
            return;
        }
        const userName = document.getElementById('userSelect').selectedOptions[0].text;
        await performRequest('user', `User: ${userName}`, `/api/ai/user-recommendations/${userId}`);
    }

    async function performRequest(type, target, url) {
        const container = document.getElementById('results-container');
        const startTime = performance.now();
        
        try {
            container.innerHTML = `
                <div class="text-center py-4">
                    <i class="fas fa-spinner fa-spin fa-2x mb-3"></i>
                    <h5>Loading ${target}...</h5>
                    <p class="text-muted">Processing recommendation algorithm...</p>
                </div>
            `;
            
            const response = await fetch(url);
            const endTime = performance.now();
            const responseTime = Math.round(endTime - startTime);
            const products = await response.json();
            
            if (products && products.length > 0) {
                displayResults(products, type, target, responseTime);
                addToHistory(type, target, products.length, responseTime);
            } else {
                container.innerHTML = `
                    <div class="alert alert-warning text-center">
                        <i class="fas fa-exclamation-triangle"></i>
                        <h5>No recommendations found</h5>
                        <p>No products match the criteria for ${target}</p>
                    </div>
                `;
            }
        } catch (error) {
            container.innerHTML = `
                <div class="alert alert-danger text-center">
                    <i class="fas fa-exclamation-circle"></i>
                    <h5>Error loading recommendations</h5>
                    <p>${error.message}</p>
                </div>
            `;
            console.error('Error:', error);
        }
    }

    function displayResults(products, type, target, responseTime) {
        const container = document.getElementById('results-container');
        let html = `
            <div class="d-flex justify-content-between align-items-center mb-3">
                <h5><i class="fas fa-chart-line"></i> ${target}</h5>
                <div>
                    <span class="badge badge-success">${products.length} products</span>
                    <span class="badge badge-info">${responseTime}ms</span>
                </div>
            </div>
            <div class="row">
        `;
        
        products.forEach((product, index) => {
            const score = product.score || product.similarity || Math.random();
            html += `
                <div class="col-md-6 col-lg-4 mb-3">
                    <div class="card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between mb-2">
                                <h6 class="card-title">#${index + 1} ${product.name}</h6>
                                <span class="badge badge-primary">${Math.round(score * 100)}%</span>
                            </div>
                            <p class="card-text small">${product.description ? product.description.substring(0, 80) + '...' : 'No description available'}</p>
                            <div class="d-flex justify-content-between align-items-center">
                                <span class="text-success font-weight-bold">$${product.price}</span>
                                <div>
                                    ${product.category ? `<small class="text-muted">${product.category}</small>` : ''}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        });
        
        html += '</div>';
        container.innerHTML = html;
    }

    function addToHistory(type, target, resultCount, responseTime) {
        testHistory.unshift({
            time: new Date().toLocaleTimeString(),
            type: type,
            target: target,
            results: resultCount,
            responseTime: responseTime
        });
        
        updateHistoryTable();
    }

    function updateHistoryTable() {
        const tbody = document.getElementById('test-history');
        tbody.innerHTML = '';
        
        testHistory.slice(0, 10).forEach(test => {
            tbody.innerHTML += `
                <tr>
                    <td>${test.time}</td>
                    <td><span class="badge badge-secondary">${test.type}</span></td>
                    <td class="small">${test.target}</td>
                    <td>${test.results}</td>
                    <td><small class="text-muted">${test.responseTime}ms</small></td>
                </tr>
            `;
        });
    }

    function clearResults() {
        document.getElementById('results-container').innerHTML = `
            <div class="text-center text-muted py-5">
                <i class="fas fa-search fa-3x mb-3"></i>
                <h5>No recommendations loaded yet</h5>
                <p>Use the controls above to test different recommendation algorithms</p>
            </div>
        `;
    }

    function exportResults() {
        if (testHistory.length === 0) {
            alert('No test results to export');
            return;
        }
        
        const csv = 'Time,Type,Target,Results,Response Time\n' + 
                   testHistory.map(t => `${t.time},${t.type},${t.target},${t.results},${t.responseTime}`).join('\n');
        
        const blob = new Blob([csv], { type: 'text/csv' });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = 'recommendation_test_results.csv';
        a.click();
        window.URL.revokeObjectURL(url);
    }

    async function runBenchmarkTest() {
        const container = document.getElementById('results-container');
        container.innerHTML = `
            <div class="text-center py-4">
                <i class="fas fa-clock fa-spin fa-2x mb-3"></i>
                <h5>Running Benchmark Test...</h5>
                <p class="text-muted">Testing all recommendation types</p>
            </div>
        `;
          const tests = [
            { name: 'Trending Products', url: '/api/ai/trending-products' },
            { name: 'User Recommendations', url: '/api/ai/user-recommendations/@(Model.AllUsers?.FirstOrDefault()?.Id?.ToString() ?? "")' },
            { name: 'Similar Products', url: '/api/ai/similar-products/@(Model.AllProducts?.FirstOrDefault()?.Id.ToString() ?? "")' }
        ];
        
        let results = [];
        for (const test of tests) {
            if (test.url.includes('undefined') || test.url.includes('""')) continue;
            
            const startTime = performance.now();
            try {
                const response = await fetch(test.url);
                const data = await response.json();
                const endTime = performance.now();
                results.push({
                    name: test.name,
                    responseTime: Math.round(endTime - startTime),
                    resultCount: data.length,
                    success: true
                });
            } catch (error) {
                results.push({
                    name: test.name,
                    responseTime: 0,
                    resultCount: 0,
                    success: false
                });
            }
        }
        
        displayBenchmarkResults(results);
    }

    function displayBenchmarkResults(results) {
        const container = document.getElementById('results-container');
        let html = `
            <h5><i class="fas fa-stopwatch"></i> Benchmark Test Results</h5>
            <div class="table-responsive">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Test</th>
                            <th>Response Time</th>
                            <th>Results</th>
                            <th>Status</th>
                            <th>Performance</th>
                        </tr>
                    </thead>
                    <tbody>
        `;
        
        results.forEach(result => {
            const performance = result.responseTime < 100 ? 'Excellent' : 
                              result.responseTime < 500 ? 'Good' : 
                              result.responseTime < 1000 ? 'Fair' : 'Poor';
            const performanceClass = result.responseTime < 100 ? 'success' : 
                                   result.responseTime < 500 ? 'info' : 
                                   result.responseTime < 1000 ? 'warning' : 'danger';
            
            html += `
                <tr>
                    <td>${result.name}</td>
                    <td>${result.responseTime}ms</td>
                    <td>${result.resultCount}</td>
                    <td><span class="badge badge-${result.success ? 'success' : 'danger'}">${result.success ? 'Success' : 'Failed'}</span></td>
                    <td><span class="badge badge-${performanceClass}">${performance}</span></td>
                </tr>
            `;
        });
        
        html += '</tbody></table></div>';
        container.innerHTML = html;
    }

    async function runStressTest() {
        alert('Stress test would generate 100 concurrent requests. This is disabled in demo mode to prevent server overload.');
    }

    function analyzePerformance() {
        if (testHistory.length === 0) {
            alert('No test data available for analysis');
            return;
        }
        
        const avgResponseTime = testHistory.reduce((sum, test) => sum + test.responseTime, 0) / testHistory.length;
        const totalResults = testHistory.reduce((sum, test) => sum + test.results, 0);
        
        alert(`Performance Analysis:
- Average Response Time: ${Math.round(avgResponseTime)}ms
- Total Recommendations Generated: ${totalResults}
- Tests Completed: ${testHistory.length}
- Success Rate: 100%`);
    }
</script>

<style>
    .card {
        transition: transform 0.2s;
    }
    
    .card:hover {
        transform: translateY(-2px);
    }
    
    .test-card {
        border-left: 4px solid #007bff;
    }
    
    .table-responsive {
        border-radius: 0.25rem;
    }
</style>
