@model IEnumerable<THLTW.Models.Product>

@{
    ViewData["Title"] = "Danh sách sản phẩm";
    var categories = ViewBag.Categories as SelectList;
    var minPrice = ViewBag.MinPrice as decimal?;
    var maxPrice = ViewBag.MaxPrice as decimal?;
    var searchTerm = ViewBag.SearchTerm as string;
    var selectedCategoryId = ViewBag.SelectedCategoryId as int?;
}

<h1>@ViewData["Title"]</h1>

<p>
    <a asp-action="Create" class="btn btn-success">Thêm sản phẩm</a>
</p>

<!-- Filter and Sort Section -->
<div class="filter-sort-section mb-4">
    <form asp-action="Index" method="get">
        <div class="row">
            <div class="col-md-3">
                <div class="form-group">
                    <label for="categoryId">Danh mục</label>
                    <select name="categoryId" id="categoryId" class="form-control" asp-items="categories">
                        <option value="">Tất cả</option>
                    </select>
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="minPrice">Giá từ</label>
                    <input type="number" name="minPrice" id="minPrice" class="form-control" value="@minPrice" />
                </div>
            </div>
            <div class="col-md-2">
                <div class="form-group">
                    <label for="maxPrice">Giá đến</label>
                    <input type="number" name="maxPrice" id="maxPrice" class="form-control" value="@maxPrice" />
                </div>
            </div>
            <div class="col-md-3">
                <div class="form-group">
                    <label for="searchTerm">Tìm kiếm</label>
                    <input type="text" name="searchTerm" id="searchTerm" class="form-control" value="@searchTerm" />
                </div>
            </div>
            @* <div class="col-md-2 align-self-end">
                <div class="form-group">
                    <button type="submit" class="btn btn-primary">Lọc</button>
                </div>
            </div> *@
        </div>
    </form>
</div>

<div class="product-list">
@foreach (var item in Model) {
        <div class="product-card">
            @if (!string.IsNullOrEmpty(item.ImageUrl))
            {
                <img src="@Url.Content(item.ImageUrl)" alt="@item.Name" class="card-img-top"/>
            }
            else
            {
                <img src="https://via.placeholder.com/300x200.png?text=No+Image" alt="No image available" class="card-img-top"/>
            }
            <div class="card-body">
                <h5 class="card-title">@Html.DisplayFor(modelItem => item.Name)</h5>
                
                <div class="price-container">
                    <p class="price">@item.Price.ToString("N0")đ</p>
                    @* <p class="original-price">1.200.000đ</p> *@ @* Placeholder for original price *@
                </div>
                @* <span class="discount-label">-15%</span> *@ @* Placeholder for discount label *@

                <div class="product-labels my-2">
                    @* <span class="label label-installment">Trả góp 0%</span> *@ @* Placeholder for labels *@
                    @* <span class="label label-sale">Giảm giá</span> *@
                </div>

                <div class="rating mb-2">
                    <span>⭐</span><span>⭐</span><span>⭐</span><span>⭐</span><span>☆</span> @* Placeholder for rating *@
                </div>
                
                <p class="card-text short-desc">@Html.DisplayFor(modelItem => item.Description)</p>
                
                <div class="action-buttons mb-2">
                    <button class="btn btn-primary btn-buy">Mua ngay</button>
                    <button class="btn btn-secondary btn-add-to-cart" data-product-id="@item.Id">Thêm vào giỏ</button>
                </div>
                 <div class="admin-actions mt-2">
                    <a asp-action="Edit" asp-route-id="@item.Id" class="btn btn-sm btn-outline-info">Edit</a>
                    <a asp-action="Details" asp-route-id="@item.Id" class="btn btn-sm btn-outline-secondary">Details</a>
                    <a asp-action="Delete" asp-route-id="@item.Id" class="btn btn-sm btn-outline-danger">Delete</a>
                </div>
            </div>
        </div>
}
</div>

<!-- Pagination Controls -->
<div class="pagination-controls mt-4">
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @if (ViewBag.PageNumber > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { pageNumber = ViewBag.PageNumber - 1, categoryId = ViewBag.SelectedCategoryId, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, searchTerm = ViewBag.SearchTerm })">Trước</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Trước</span>
                </li>
            }

            @for (int i = 1; i <= ViewBag.TotalPages; i++)
            {
                <li class="page-item @(i == ViewBag.PageNumber ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Index", new { pageNumber = i, categoryId = ViewBag.SelectedCategoryId, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, searchTerm = ViewBag.SearchTerm })">@i</a>
                </li>
            }

            @if (ViewBag.PageNumber < ViewBag.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Index", new { pageNumber = ViewBag.PageNumber + 1, categoryId = ViewBag.SelectedCategoryId, minPrice = ViewBag.MinPrice, maxPrice = ViewBag.MaxPrice, searchTerm = ViewBag.SearchTerm })">Sau</a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link">Sau</span>
                </li>
            }
        </ul>
    </nav>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Auto-submit filter form on change
            $('#categoryId, #minPrice, #maxPrice, #searchTerm').on('change', function() {
                $(this).closest('form').submit();
            });

            $('.btn-add-to-cart').on('click', function() { // Changed selector
                console.log('Add to cart button clicked.'); // DEBUG LINE
                var productId = $(this).data('product-id'); // Reads data-product-id
                console.log('Product ID:', productId); // DEBUG LINE
                
                var token = $('input[name="__RequestVerificationToken"]').val();
                console.log('Token:', token); // DEBUG LINE

                if (!productId) {
                    console.error('Product ID not found. Make sure the button has data-product-id attribute.');
                    alert('Lỗi: Không tìm thấy ID sản phẩm.');
                    return;
                }
                if (!token) {
                    console.error('Anti-forgery token not found. Make sure @Html.AntiForgeryToken() is present in a form on the page, or the hidden form in _Layout.cshtml is correctly implemented.');
                    alert('Lỗi: Token xác thực không tìm thấy.');
                    return;
                }

                $.ajax({
                    url: '@Url.Action("AddToCart", "Cart")',
                    type: 'POST',
                    data: { productId: productId, quantity: 1 }, // Default quantity to 1
                    headers: {
                        RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val() // If you have AntiForgeryToken in a form
                    },
                    success: function(response) {
                        if(response.success) {
                            alert(response.message); // Hiển thị thông báo thành công
                            // Update cart item count in navbar
                            if (typeof handleAddToCartSuccess === 'function') {
                                handleAddToCartSuccess(response.itemCount);
                            }
                        } else {
                            alert('Lỗi: ' + response.message);
                        }
                    },
                    error: function() {
                        alert('Đã xảy ra lỗi khi thêm sản phẩm vào giỏ hàng.');
                    }
                });
            });
        });
    </script>
}

<style>
    .product-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); /* Responsive grid */
        gap: 25px; /* Increased gap */
    }

    .product-card {
        background-color: #ffffff; /* Clean white background */
        border: 1px solid #e0e0e0; /* Lighter, more subtle border */
        border-radius: 0.3rem; 
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.06); /* Softer, more diffused shadow */
        transition: all 0.3s ease-in-out;
        display: flex;
        flex-direction: column;
        overflow: hidden; 
    }

    .product-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1); /* Enhanced shadow on hover */
    }

    .product-card .card-img-top {
        width: 100%;
        height: 220px; /* Adjusted height for images */
        object-fit: cover; 
        border-bottom: 1px solid #f0f0f0; /* Very light separator line */
    }

    .product-card .card-body {
        padding: 1.25rem;
        display: flex;
        flex-direction: column;
        flex-grow: 1; 
    }

    .product-card .card-title {
        font-family: 'Trajan Pro', serif; /* Luxurious font */
        font-size: 1.35rem; /* Adjusted title size */
        color: #003322; /* Dark green, primary Rolex color */
        margin-bottom: 0.6rem;
        font-weight: bold;
        line-height: 1.3;
    }

    .product-card .price-container {
        margin-bottom: 0.75rem;
        display: flex;
        align-items: center;
        gap: 10px; /* Space between current price and original price */
    }

    .product-card .price {
        font-size: 1.6rem; /* Prominent price */
        font-weight: bold;
        color: #c0a062; /* Gold accent for price */
        margin-bottom: 0;
    }

    /* Style for original price if you add it later, e.g., for sales
    .product-card .original-price {
        font-size: 0.9rem;
        text-decoration: line-through;
        color: #777;
    } 
    */

    .product-card .short-desc {
        font-size: 0.9rem;
        color: #454545; /* Darker grey for better readability */
        line-height: 1.5;
        margin-bottom: 1.25rem;
        flex-grow: 1; /* Allows description to take available space */
        height: 4.5em; /* Approximately 3 lines (0.9rem * 1.5 line-height * 3 lines) */
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        /* line-clamp: 3; Standard property, -webkit- is for wider compatibility */
    }

    .product-card .action-buttons {
        margin-top: auto; /* Pushes buttons to the bottom */
        display: flex;
        gap: 10px;
    }

    .product-card .action-buttons .btn {
        flex-grow: 1; /* Makes buttons take equal width */
        padding-top: 0.6rem;
        padding-bottom: 0.6rem;
        font-size: 0.9rem;
    }

    .product-card .admin-actions {
        border-top: 1px solid #f0f0f0; /* Light separator for admin actions */
        padding-top: 0.75rem;
        margin-top: 1rem;
        display: flex; /* Align admin buttons */
        justify-content: flex-start; /* Align to the start */
        gap: 8px; /* Space between admin buttons */
    }

    .admin-actions .btn-sm {
        /* padding: 0.2rem 0.4rem; */ /* Using global btn-sm padding is likely better */
        /* font-size: 0.75rem; */
        margin-right: 0; /* Remove individual margin if using gap */
    }

</style>
